plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.10.0'
    id "io.freefair.lombok" version "6.0.0-m2"
    id 'org.gradle.test-retry' version '1.5.0'
}

repositories {
    mavenCentral()
}

def restAssuredVersion = "5.3.0",
    allureVersion = "2.19.0",
    selenideVersion = "6.13.0",
    junitVersion = "5.9.2",
    slf4jVersion = "2.0.7"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation (
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            'com.github.javafaker:javafaker:1.0.2',
            'org.aeonbits.owner:owner:1.0.12',
            "io.appium:java-client:8.3.0"
    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform{
        if (System.getProperty("tag") != null && !System.getProperty("tag").isEmpty()) {
            includeTags System.getProperty("tag")
        }
    }

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'             : true,
                'junit.jupiter.execution.parallel.mode.default'        : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default': 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'     : 'custom',
                'junit.jupiter.execution.parallel.config.custom.class' : 'helpers.CustomThreadsStrategy'
        ]
    }

//    retry {
//        maxRetries = 2
//        maxFailures = 10
//    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }

}
